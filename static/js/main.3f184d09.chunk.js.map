{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","itemWidth","frameSize","step","animationDuration","infinite","useState","itemIndex","setItemIndex","maxIndex","length","prevDisabled","nextDisabled","className","style","width","transition","map","url","ind","transform","src","alt","type","disabled","onClick","Math","max","min","App","state","handleCheckboxChange","event","target","name","checked","setState","prevState","handleNumberChange","value","newValue","parseInt","String","this","htmlFor","id","onChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f184d09.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  itemWidth: number;\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images, itemWidth, frameSize, step, animationDuration, infinite,\n}) => {\n  const [itemIndex, setItemIndex] = useState(0);\n  const maxIndex = images.length - frameSize;\n\n  const prevDisabled = (itemIndex <= 0) && !infinite;\n  const nextDisabled = (itemIndex >= maxIndex) && !infinite;\n\n  const handleNextClick = () => {\n    if (infinite && itemIndex === maxIndex) {\n      setItemIndex(0);\n    } else {\n      setItemIndex(Math.min(maxIndex, itemIndex + step));\n    }\n  };\n\n  const handlePrevClick = () => {\n    if (infinite && itemIndex === 0) {\n      setItemIndex(maxIndex);\n    } else {\n      setItemIndex(Math.max(0, itemIndex - step));\n    }\n  };\n\n  return (\n    <div\n      className=\"carousel\"\n      style={{\n        width: `${frameSize * itemWidth}px`,\n        transition: `${animationDuration}ms`,\n      }}\n    >\n      <ul className=\"carousel__list\">\n        {images.map((url, ind) => (\n          <li\n            key={url}\n            style={{\n              transform: `translateX(${-itemIndex * itemWidth}px)`,\n              transition: `${animationDuration}ms`,\n            }}\n          >\n            <img\n              className=\"carousel__image\"\n              src={url}\n              alt={`${ind + 1}`}\n              style={{ width: itemWidth }}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <div className=\"carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"carousel__button\"\n          disabled={prevDisabled}\n          onClick={handlePrevClick}\n        >\n          &lt;\n        </button>\n\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className=\"carousel__button\"\n          disabled={nextDisabled}\n          onClick={handleNextClick}\n        >\n          &gt;\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = event.target;\n\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        [name]: checked,\n      };\n    });\n  };\n\n  handleNumberChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n    let newValue = +value;\n\n    if (name === 'frameSize' || name === 'step' || name === 'itemWidth') {\n      const { min, max } = event.target;\n\n      newValue = Math.max(+min, Math.min(+max, +value));\n    }\n\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        [name]: parseInt(String(newValue), 10),\n      };\n    });\n  };\n\n  render() {\n    const {\n      images, itemWidth, frameSize, step, animationDuration, infinite,\n    }\n      = this.state;\n\n    return (\n      <div className=\"app\">\n        <div>\n          <h1 data-cy=\"title\">{`Carousel with ${images.length} images`}</h1>\n\n          <div className=\"inputs\">\n            <label htmlFor=\"itemWidth\">\n              Item width:\n              <input\n                type=\"number\"\n                id=\"itemWidth\"\n                name=\"itemWidth\"\n                value={itemWidth}\n                onChange={this.handleNumberChange}\n                min={130}\n                max={1000}\n              />\n            </label>\n\n            <label htmlFor=\"frameSize\">\n              Frame size:\n              <input\n                type=\"number\"\n                id=\"frameSize\"\n                name=\"frameSize\"\n                value={frameSize}\n                onChange={this.handleNumberChange}\n                min={1}\n                max={images.length}\n              />\n            </label>\n\n            <label htmlFor=\"step\">\n              Step:\n              <input\n                type=\"number\"\n                id=\"step\"\n                name=\"step\"\n                value={step}\n                onChange={this.handleNumberChange}\n                min={1}\n                max={images.length}\n              />\n            </label>\n\n            <label htmlFor=\"animationDuration\">\n              Animation duration:\n              <input\n                type=\"number\"\n                id=\"animationDuration\"\n                name=\"animationDuration\"\n                value={animationDuration}\n                onChange={this.handleNumberChange}\n              />\n            </label>\n\n            <label htmlFor=\"infinite\">\n              Infinite:\n              <input\n                type=\"checkbox\"\n                id=\"infinite\"\n                name=\"infinite\"\n                checked={infinite}\n                onChange={this.handleCheckboxChange}\n              />\n            </label>\n          </div>\n\n          <Carousel\n            images={images}\n            itemWidth={itemWidth}\n            frameSize={frameSize}\n            step={step}\n            animationDuration={animationDuration}\n            infinite={infinite}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}